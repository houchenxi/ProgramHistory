今天工作的主要内容是休息，因为昨天看sourceTree太晚，没有办法再高负荷工作一天。

今天临时选择的主要工作是把xcode的内核imedemo项目保存到私有的Git公网仓库上去，过程如下：
原来工作的成果已经在Github中管理着，但是没有提交公网保存，且含有源代码。
为了保证信息安全，需要剔除源代码，保留工程文件中对源代码的路径的引用，google搜索到bitbucket，正好就是sourceTree的开发商atlassian，上面可以无限制的托管私有不公开的Git仓库，符合自己的需求。
剔除源代码的过程涉及到分支管理操作，遴选操作，甚至是最后发现的Git相对应于SVN乌龟的Revert changes from revision的回滚操作，回滚操作结合reset，就可以实现单个提交的撤销操作，从而从中分离出一部分文件单独重新构成原子的提交。中途遇到的不能删除origin的分支的问题，web页面上也是不能删除，所以后来思来想去，采取了非常灵活的管理手段，整个仓库删除，然后重新push分支到origin的地方进行重建，不去push无法删除的分支，这样就绕过了remote分支无论是客户端还是web管理页面上都不能删除的问题。

另外还有一些插进来的支线事项：
1. 教授希望GetIsHandWr接口直接返回是否手写状态的bool值
2. 教授报给凯夫，我提交的代码在安卓的编译流程中（Android.mk之类的）中不能够通过编译，原因是声明了虚函数的类型没有同时定义虚的析构函数。这个Issue的编译出错地方不明确，因为没有亲自用出安卓包的环境去亲自测试编译。
问题的逻辑需要一定的推导：
类型A没有声明虚析构函数 ===》 类型B继承了这个类型A =====》 类型B进行编译 ========》 类型B的析构函数不是虚的 ===========》 ？
无法继续推导了，经验告诉我们，声明虚函数的类型，需要把析构函数同时声明为virtual，使得编译器在编译的时候明确的知道，派生类在析构的时候能够析构彻底，这个也不是很能说通，不是一个理所当然的符合实践的逻辑，难道就因为有了虚函数的存在，析构函数就无法彻底的析构整个类型了吗？类型在析构的时候有可能是从基类的引用发起的，所以派生类实例B的析构可能是通过其基类A的引用通过delete发起的，这样就产生一个问题，这次delete对A的析构函数的调用，如果析构函数~A本身不是虚函数，就会导致A的析构不彻底，原因是类型系统在delete调用上是只知道实例是一个类型A，所以仅仅调用A的实现，导致A的部分析构完成，应当的类型B的析构函数没有调用。而如果是类型A声明析构函数为virtual，则会使类型A和类型B的析构函数都成为virtual的，从而在对A引用的B实例析构的时候，delete操作会调用~这个destructor方法，而不管它的名字是~A还是~B，从而这个destructor应该会因为多台的存在，匹配了派生类B的析构的实现代码，而在B实现的末尾，编译器会插入A的析构的代码，从而使destruct这种调用深入到调用层级的最派生的实现来开始，避免了不完整的析构，而这种执行上的安排，在引用对象为基类的引用类型，无论是指针还是引用的情况下，都必须由基类析构函数声明为virtual来保证，没有虚函数声明的类型，特殊性又体现在何处呢？从实践看，虚函数启用了类型本身的多态，使其在引用调用delete时有了深入派生层级实现的倾向，而如果类型中没有了虚函数的声明，会否导致其对delete引用类型完全没有这种倾向了呢？
我们用简单的代码就可以验证。


验证文件: BaseVirtual.cpp
==============================================================================
#include <iostream>
using namespace std;
class A
{
public:
    virtual void f(void) = 0;
public:
    ~A()
    {
        cout << "Destructing " << __LINE__ << endl;
    }
};



class B : public A
{
 
public:
    ~B()
    {
        cout << "Destructing " << __LINE__ << endl;
    }
};

int main
()
{
    A* pa = new  B();
    delete pa;
}
==============================================================================




错误输出：
==============================================================================
houchenxi@houchenxi:Grammar$ g++ BaseVirtual.cpp 
BaseVirtual.cpp:33:18: error: allocating an object of abstract class type 'B'
    A* pa = new  B();
                 ^
BaseVirtual.cpp:10:18: note: unimplemented pure virtual method 'f' in 'B'
    virtual void f(void) = 0;
                 ^
BaseVirtual.cpp:34:5: warning: delete called on 'A' that is abstract but has
      non-virtual destructor [-Wdelete-non-virtual-dtor]
    delete pa;
    ^
1 warning and 1 error generated.
==============================================================================



从现象上看，编译器会抱怨警告，说是类型A作为抽象的类型，没有将析构函数声明为virtual，但是在g++默认情况下仅仅是一条警告，而用g++ -werror来看的时候，发现由于警告被当做错误处理，导致不能够编译通过。
因此到目前为止，调查结果显示，教授的安卓下内核编译选项有可能打开了-werror选项，导致所有的警告被当做error处理，从而无法编译通过。Over。


