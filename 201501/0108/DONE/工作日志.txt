今天的工作目标是纠错二元cache的添加需求：

现状：
这个需求概况明确，细节不完全明确。

需求：
和凯夫征询了需求的现状，二元cache相对于一元cache在纠错流程中的位置。

理解：
凯夫对纠错的解释比较到位，涉及到当前需求比较明确和简单，就是在原来一元cache的流程之前再增加一个二元cache拦截错输串。

解决方案设计：
因此整个需求的解决方案是相当清楚的，就是重新设计一个类型，它的职责是加载二元cache信息。

然后在纠错流程走到一元cache之前纠正错输串之前的时候，用当前的上文信息和当前的输入串尝试和二元cache匹配，如果匹配到条目，就将纠正串设定为匹配项。同时构造按键纠错信息存入按键纠错结果，交由下一步流程处理。
就需求而言，就是这么简单。但是实现会要求复用一元cache的脚本，进行9键和26键的数据序列化和加载，就是在在一元cache脚本基础中重新设计一个针对二元cache的Python脚本。就新类型而言，需要重写加载的逻辑、匹配的逻辑，保证新的上文信息能够纳入到匹配的key匹配过程中去。

理性客观的评估一元cache的可复用性，既不牵强附会，也不重头造轮子，争取在复用和新构之间取得一个理想的平衡点。


